"""
MIT License

Copyright (c) 2022 A ô…™s ú…¥·¥è…™

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import re
import time

from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.error import BadRequest, Unauthorized
from telegram.ext import CallbackQueryHandler, CommandHandler

import Exon.modules.sql.connection_sql as sql
from Exon import DEV_USERS, DRAGONS, dispatcher
from Exon.modules.helper_funcs import chat_status
from Exon.modules.helper_funcs.alternate import send_message, typing_action

user_admin = chat_status.user_admin


@user_admin
@typing_action
def allow_connections(update, context) -> str:

    chat = update.effective_chat
    args = context.args

    if chat.type == chat.PRIVATE:
        send_message(
            update.effective_message,
            "·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è. …¥·¥è·¥õ …™…¥ ·¥ò·¥ç!",
        )

    elif len(args) >= 1:
        var = args[0]
        if var == "no":
            sql.set_allow_connect_to_chat(chat.id, False)
            send_message(
                update.effective_message,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
            )
        elif var == "yes":
            sql.set_allow_connect_to_chat(chat.id, True)
            send_message(
                update.effective_message,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
            )
        else:
            send_message(
                update.effective_message,
                "·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä `yes` ·¥è Ä `no`!",
                parse_mode=ParseMode.MARKDOWN,
            )
    elif get_settings := sql.allow_connect_to_chat(chat.id):
        send_message(
            update.effective_message,
            "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *·¥Ä ü ü·¥è·¥°·¥á·¥Ö* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
            parse_mode=ParseMode.MARKDOWN,
        )
    else:
        send_message(
            update.effective_message,
            "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *…¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
            parse_mode=ParseMode.MARKDOWN,
        )


@typing_action
def connection_chat(update, context):

    chat = update.effective_chat
    user = update.effective_user

    conn = connected(context.bot, update, chat, user.id, need_admin=True)

    if conn:
        chat = dispatcher.bot.getChat(conn)
        chat_name = dispatcher.bot.getChat(conn).title
    else:
        if update.effective_message.chat.type != "private":
            return
        chat = update.effective_chat
        chat_name = update.effective_message.chat.title

    if conn:
        message = f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è {chat_name}.\n"
    else:
        message = " è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …™…¥ ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò.\n"
    send_message(update.effective_message, message, parse_mode="markdown")


@typing_action
def connect_chat(update, context):

    chat = update.effective_chat
    user = update.effective_user
    args = context.args

    if update.effective_chat.type == "private":
        if args and len(args) >= 1:
            try:
                connect_chat = int(args[0])
                getstatusadmin = context.bot.get_chat_member(
                    connect_chat,
                    update.effective_message.from_user.id,
                )
            except ValueError:
                try:
                    connect_chat = str(args[0])
                    get_chat = context.bot.getChat(connect_chat)
                    connect_chat = get_chat.id
                    getstatusadmin = context.bot.get_chat_member(
                        connect_chat,
                        update.effective_message.from_user.id,
                    )
                except BadRequest:
                    send_message(update.effective_message, "…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ ID!")
                    return
            except BadRequest:
                send_message(update.effective_message, "…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ ID!")
                return

            isadmin = getstatusadmin.status in ("administrator", "creator")
            ismember = getstatusadmin.status in ("member")
            isallow = sql.allow_connect_to_chat(connect_chat)

            if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
                if connection_status := sql.connect(
                    update.effective_message.from_user.id,
                    connect_chat,
                ):
                    conn_chat = dispatcher.bot.getChat(
                        connected(context.bot, update, chat, user.id, need_admin=False),
                    )
                    chat_name = conn_chat.title
                    send_message(
                        update.effective_message,
                        f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{chat_name}*. \n·¥ús·¥á /helpconnect ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.",
                        parse_mode=ParseMode.MARKDOWN,
                    )

                    sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
                else:
                    send_message(update.effective_message, "Connection failed!")
            else:
                send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                )
        else:
            gethistory = sql.get_history_conn(user.id)
            if gethistory:
                buttons = [
                    InlineKeyboardButton(
                        text="‚õî ·¥Ñ ü·¥ès·¥á  ô·¥ú·¥õ·¥õ·¥è…¥",
                        callback_data="connect_close",
                    ),
                    InlineKeyboardButton(
                        text="üßπ ·¥Ñ ü·¥á·¥Ä Ä  ú…™s·¥õ·¥è Ä è",
                        callback_data="connect_clear",
                    ),
                ]
            else:
                buttons = []
            if conn := connected(context.bot, update, chat, user.id, need_admin=False):
                connectedchat = dispatcher.bot.getChat(conn)
                text = (
                    f"“ì ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{connectedchat.title}* (`{conn}`)"
                )
                buttons.append(
                    InlineKeyboardButton(
                        text="üîå ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ",
                        callback_data="connect_disconnect",
                    ),
                )
            else:
                text = "·¥° Ä…™·¥õ·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ …™·¥Ö ·¥è Ä ·¥õ·¥Ä…¢ ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ!"
            if gethistory:
                text += "\n\n*Connection history:*\n"
                text += "‚ïí‚ïê‚ïê‚ïê„Äå *…™…¥“ì·¥è* „Äç\n"
                text += "‚îÇ  s·¥è Ä·¥õ·¥á·¥Ö: `…¥·¥á·¥°·¥ás·¥õ`\n"
                text += "‚îÇ\n"
                buttons = [buttons]
                for x in sorted(gethistory.keys(), reverse=True):
                    htime = time.strftime("%·¥Ö/%·¥ç/% è", time.localtime(x))
                    text += f'‚ïû‚ïê„Äå *{gethistory[x]["chat_name"]}* „Äç\n‚îÇ   `{gethistory[x]["chat_id"]}`\n‚îÇ   `{htime}`\n'

                    text += "‚îÇ\n"
                    buttons.append(
                        [
                            InlineKeyboardButton(
                                text=gethistory[x]["chat_name"],
                                callback_data=f'connect({gethistory[x]["chat_id"]})',
                            )
                        ]
                    )

                text += "‚ïò‚ïê‚ïê„Äå ·¥õ·¥è·¥õ·¥Ä ü {} ·¥Ñ ú·¥Ä·¥õs „Äç".format(
                    f"{len(gethistory)} (max)"
                    if len(gethistory) == 5
                    else str(len(gethistory))
                )

                conn_hist = InlineKeyboardMarkup(buttons)
            elif buttons:
                conn_hist = InlineKeyboardMarkup([buttons])
            else:
                conn_hist = None
            send_message(
                update.effective_message,
                text,
                parse_mode="markdown",
                reply_markup=conn_hist,
            )

    else:
        getstatusadmin = context.bot.get_chat_member(
            chat.id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(chat.id)
        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            if connection_status := sql.connect(
                update.effective_message.from_user.id,
                chat.id,
            ):
                chat_name = dispatcher.bot.getChat(chat.id).title
                send_message(
                    update.effective_message,
                    f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{chat_name}*.",
                    parse_mode=ParseMode.MARKDOWN,
                )

                try:
                    sql.add_history_conn(user.id, str(chat.id), chat_name)
                    context.bot.send_message(
                        update.effective_message.from_user.id,
                        f" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{chat_name}*. \n·¥ús·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.",
                        parse_mode="markdown",
                    )

                except (BadRequest, Unauthorized):
                    pass
            else:
                send_message(update.effective_message, "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
        else:
            send_message(
                update.effective_message,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
            )


def disconnect_chat(update, context):

    if update.effective_chat.type == "private":
        if disconnection_status := sql.disconnect(
            update.effective_message.from_user.id
        ):
            sql.disconnected_chat = send_message(
                update.effective_message,
                "·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ!",
            )
        else:
            send_message(update.effective_message, " è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!")
    else:
        send_message(update.effective_message, "·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á …™…¥ PM.")


def connected(bot: Bot, update: Update, chat, user_id, need_admin=True):
    user = update.effective_user

    if chat.type == chat.PRIVATE and sql.get_connected_chat(user_id):

        conn_id = sql.get_connected_chat(user_id).chat_id
        getstatusadmin = bot.get_chat_member(
            conn_id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(conn_id)

        if (
            (isadmin)
            or (isallow and ismember)
            or (user.id in DRAGONS)
            or (user.id in DEV_USERS)
        ):
            if need_admin is True:
                if (
                    getstatusadmin.status in ("administrator", "creator")
                    or user_id in DRAGONS
                    or user.id in DEV_USERS
                ):
                    return conn_id
                send_message(
                    update.effective_message,
                    " è·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò!",
                )
            else:
                return conn_id
        else:
            send_message(
                update.effective_message,
                "·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  Ä…™…¢ ú·¥õs ·¥è Ä  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.\nI'·¥†·¥á ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö  è·¥è·¥ú.",
            )
            disconnect_chat(update, bot)
    else:
        return False


CONN_HELP = """
·¥Ä·¥Ñ·¥õ…™·¥è…¥s ·¥° ú…™·¥Ñ ú ·¥Ä Ä·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥°…™·¥õ ú ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥òs:-
*·¥ús·¥á Ä ·¥Ä·¥Ñ·¥õ…™·¥è…¥s:*
‚Ä¢ ·¥†…™·¥á·¥° …¥·¥è·¥õ·¥ás
‚Ä¢ ·¥†…™·¥á·¥° “ì…™ ü·¥õ·¥á Äs
‚Ä¢ ·¥†…™·¥á·¥°  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ
‚Ä¢ ·¥†…™·¥á·¥° ·¥Ä…¥·¥õ…™“ì ü·¥è·¥è·¥Ö s·¥á·¥õ·¥õ…™…¥…¢s
‚Ä¢ ·¥†…™·¥á·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös
‚Ä¢ ·¥ç·¥Ä…¥ è ·¥ç·¥è Ä·¥á …™…¥ “ì·¥ú·¥õ·¥ú Ä·¥á
!
*·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä·¥Ñ·¥õ…™·¥è…¥s:*
 ‚Ä¢ View ·¥Ä…¥·¥Ö ·¥á·¥Ö…™·¥õ …¥·¥è·¥õ·¥ás
 ‚Ä¢ ·¥†…™·¥á·¥° ·¥Ä…¥·¥Ö ·¥á·¥Ö…™·¥õ “ì…™ ü·¥õ·¥á Äs.
 ‚Ä¢ …¢·¥á·¥õ …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã ·¥è“ì ·¥Ñ ú·¥Ä·¥õ.
 ‚Ä¢ s·¥á·¥õ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥Ä…¥·¥õ…™“ì ü·¥è·¥è·¥Ö s·¥á·¥õ·¥õ…™…¥…¢s. 
 ‚Ä¢ s·¥á·¥õ ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ s·¥á·¥õ·¥õ…™…¥…¢s.
 ‚Ä¢ Set  ü·¥è·¥Ñ·¥ãs ·¥Ä…¥·¥Ö ·¥ú…¥ ü·¥è·¥Ñ·¥ãs …™…¥ ·¥Ñ ú·¥Ä·¥õ.
 ‚Ä¢ ·¥á…¥·¥Ä ô ü·¥á and ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös in chat.
 ‚Ä¢ ·¥áx·¥ò·¥è Ä·¥õ ·¥Ä…¥·¥Ö Imports ·¥è“ì ·¥Ñ ú·¥Ä·¥õ  ô·¥Ä·¥Ñ·¥ã·¥ú·¥ò.
 ‚Ä¢ ·¥ç·¥è Ä·¥á …™…¥ “ì·¥ú·¥õ·¥ú Ä·¥á!
"""


def help_connect_chat(update, context):

    context.args

    if update.effective_message.chat.type != "private":
        send_message(update.effective_message, "PM ·¥ç·¥á ·¥°…™·¥õ ú ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò.")
        return
    send_message(update.effective_message, CONN_HELP, parse_mode="markdown")


def connect_button(update, context):

    query = update.callback_query
    chat = update.effective_chat
    user = update.effective_user

    connect_match = re.match(r"connect\((.+?)\)", query.data)
    disconnect_match = query.data == "connect_disconnect"
    clear_match = query.data == "connect_clear"
    connect_close = query.data == "connect_close"

    if connect_match:
        target_chat = connect_match[1]
        getstatusadmin = context.bot.get_chat_member(target_chat, query.from_user.id)
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(target_chat)

        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            if connection_status := sql.connect(query.from_user.id, target_chat):
                conn_chat = dispatcher.bot.getChat(
                    connected(context.bot, update, chat, user.id, need_admin=False),
                )
                chat_name = conn_chat.title
                query.message.edit_text(
                    f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{chat_name}*. \n·¥ús·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.",
                    parse_mode=ParseMode.MARKDOWN,
                )

                sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
            else:
                query.message.edit_text("·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
        else:
            context.bot.answer_callback_query(
                query.id,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                show_alert=True,
            )
    elif disconnect_match:
        if disconnection_status := sql.disconnect(query.from_user.id):
            sql.disconnected_chat = query.message.edit_text("Disconnected from chat!")
        else:
            context.bot.answer_callback_query(
                query.id,
                " è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!",
                show_alert=True,
            )
    elif clear_match:
        sql.clear_history_conn(query.from_user.id)
        query.message.edit_text(" ú…™s·¥õ·¥è Ä è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö!")
    elif connect_close:
        query.message.edit_text("·¥Ñ ü·¥ès·¥á·¥Ö.\n·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥Ä…¢·¥Ä…™…¥, ·¥õ è·¥ò·¥á /connect")
    else:
        connect_chat(update, context)


__mod_name__ = "ùô≤·¥è…¥…¥·¥á·¥Ñ·¥õs üîó"

__help__ = """
*s·¥è·¥ç·¥á·¥õ…™·¥ç·¥ás,  è·¥è·¥ú ·¥ä·¥ús·¥õ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö s·¥è·¥ç·¥á …¥·¥è·¥õ·¥ás ·¥Ä…¥·¥Ö “ì…™ ü·¥õ·¥á Äs ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ,  ô·¥ú·¥õ  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥°·¥Ä…¥·¥õ ·¥á·¥†·¥á Ä è·¥è…¥·¥á ·¥õ·¥è s·¥á·¥á; ·¥õ ú…™s …™s ·¥° ú·¥á Ä·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥Ñ·¥è·¥ç·¥á …™…¥...
·¥õ ú…™s ·¥Ä ü ü·¥è·¥°s  è·¥è·¥ú ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä·¥õ's ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á, ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s ·¥õ·¥è …™·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä·¥ò·¥ò·¥á·¥Ä Ä…™…¥…¢ …™…¥ ·¥Ñ ú·¥Ä·¥õ! “ì·¥è Ä ·¥è ô·¥†…™·¥è·¥ús  Ä·¥á·¥Äs·¥è…¥s,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s;  ô·¥ú·¥õ ·¥Ä…¥ è ·¥ç·¥á·¥ç ô·¥á Ä …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ ·¥†…™·¥á·¥°  è·¥è·¥ú Ä ·¥Ö·¥Ä·¥õ·¥Ä.*


‚ùÇ /connect: `·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õÍú± ·¥õ·¥è ·¥Ñ ú·¥Ä·¥õ` (·¥Ñ·¥Ä…¥  ô·¥á ·¥Ö·¥è…¥·¥á …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò  ô è /connect ·¥è Ä /connect <chat id> …™…¥ ·¥ò·¥ç)

‚ùÇ /connection: ` ü…™Íú±·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õÍú±`

‚ùÇ /disconnect: `·¥Ö…™Íú±·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ “ì Ä·¥è·¥ç ·¥Ä ·¥Ñ ú·¥Ä·¥õ`

‚ùÇ /helpconnect: ` ü…™Íú±·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥  ô·¥á ·¥úÍú±·¥á·¥Ö  Ä·¥á·¥ç·¥è·¥õ·¥á ü è`

*·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è:*

‚ùÇ /allowconnect <yes/no>: `·¥Ä ü ü·¥è·¥° ·¥Ä ·¥úÍú±·¥á Ä ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä·¥õ`

"""

CONNECT_CHAT_HANDLER = CommandHandler(
    "connect", connect_chat, pass_args=True, run_async=True
)
CONNECTION_CHAT_HANDLER = CommandHandler("connection", connection_chat, run_async=True)
DISCONNECT_CHAT_HANDLER = CommandHandler("disconnect", disconnect_chat, run_async=True)
ALLOW_CONNECTIONS_HANDLER = CommandHandler(
    "allowconnect", allow_connections, pass_args=True, run_async=True
)
HELP_CONNECT_CHAT_HANDLER = CommandHandler(
    "helpconnect", help_connect_chat, run_async=True
)
CONNECT_BTN_HANDLER = CallbackQueryHandler(
    connect_button, pattern=r"connect", run_async=True
)

dispatcher.add_handler(CONNECT_CHAT_HANDLER)
dispatcher.add_handler(CONNECTION_CHAT_HANDLER)
dispatcher.add_handler(DISCONNECT_CHAT_HANDLER)
dispatcher.add_handler(ALLOW_CONNECTIONS_HANDLER)
dispatcher.add_handler(HELP_CONNECT_CHAT_HANDLER)
dispatcher.add_handler(CONNECT_BTN_HANDLER)
