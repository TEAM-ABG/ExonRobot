"""
MIT License

Copyright (c) 2022 A ô…™s ú…¥·¥è…™

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import html

import bs4
import jikanpy
import requests
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ParseMode,
    Update,
)
from telegram.ext import CallbackContext

from Exon import dispatcher
from Exon.modules.disable import DisableAbleCommandHandler

info_btn = "·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥"
kaizoku_btn = "·¥ã·¥Ä…™·¥¢·¥è·¥ã·¥ú ‚ò†Ô∏è"
kayo_btn = "·¥ã·¥Ä è·¥è üè¥‚Äç‚ò†Ô∏è"
prequel_btn = "‚¨ÖÔ∏è ·¥ò Ä·¥á«´·¥ú·¥á ü"
sequel_btn = "s·¥á«´·¥ú·¥á ü ‚û°Ô∏è"
close_btn = "·¥Ñ ü·¥ès·¥á ‚ùå"


def shorten(description, info="anilist.co"):
    msg = ""
    if len(description) > 700:
        description = description[:500] + "...."
        msg += f"\n*·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥*:\n{description}[Read More]({info})"
    else:
        msg += f"\n*·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥*:\n{description}"
    return msg


# time formatter from uniborg
def t(milliseconds: int) -> str:
    """…™…¥·¥ò·¥ú·¥õs ·¥õ…™·¥ç·¥á …™…¥ ·¥ç…™ ü ü…™s·¥á·¥Ñ·¥è…¥·¥Ös, ·¥õ·¥è …¢·¥á·¥õ  ô·¥á·¥Ä·¥ú·¥õ…™“ì…™·¥á·¥Ö ·¥õ…™·¥ç·¥á,
    as string"""
    seconds, milliseconds = divmod(milliseconds, 1000)
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)
    tmp = (
        (f"{str(days)} Days, " if days else "")
        + (f"{str(hours)} Hours, " if hours else "")
        + (f"{str(minutes)} Minutes, " if minutes else "")
        + (f"{str(seconds)} Seconds, " if seconds else "")
        + (f"{str(milliseconds)} ms, " if milliseconds else "")
    )

    return tmp[:-2]


airing_query = """
query ($id: Int,$search: String) {
    Media (id: $id, type: ANIME,search: $search) {
        id
        episodes
        title {
            romaji
            english
            native
        }
        nextAiringEpisode {
            airingAt
            timeUntilAiring
            episode
        }
    }
}
"""

fav_query = """
query ($id: Int) {
    Media (id: $id, type: ANIME) {
        id
        title {
            romaji
            english
            native
        }
    }
}
"""

anime_query = """
query ($id: Int,$search: String) {
    Media (id: $id, type: ANIME,search: $search) {
        id
        title {
            romaji
            english
            native
        }
        description (asHtml: false)
        startDate{
            year
        }
        episodes
        season
        type
        format
        status
        duration
        siteUrl
        studios{
            nodes{
                name
            }
        }
        trailer{
            id
            site
            thumbnail
        }
        averageScore
        genres
        bannerImage
    }
}
"""

character_query = """
query ($query: String) {
    Character (search: $query) {
        id
        name {
            first
            last
            full
            native
        }
        siteUrl
        image {
            large
        }
        description(asHtml: false)
    }
}
"""

manga_query = """
query ($id: Int,$search: String) {
    Media (id: $id, type: MANGA,search: $search) {
        id
        title {
            romaji
            english
            native
        }
        description (asHtml: false)
        startDate{
            year
        }
        type
        format
        status
        siteUrl
        averageScore
        genres
        bannerImage
    }
}
"""

url = "https://graphql.anilist.co"


def extract_arg(message: Message):
    split = message.text.split(" ", 1)
    if len(split) > 1:
        return split[1]
    reply = message.reply_to_message
    return reply.text if reply is not None else None


def airing(update: Update, context: CallbackContext):
    message = update.effective_message
    search_str = extract_arg(message)
    if not search_str:
        update.effective_message.reply_text(
            "·¥õ·¥á ü ü ·¥Ä…¥…™·¥ç·¥á …¥·¥Ä·¥ç·¥á :) ( /airing <anime name>)",
        )
        return
    variables = {"search": search_str}
    response = requests.post(
        url,
        json={"query": airing_query, "variables": variables},
    ).json()["data"]["Media"]
    msg = f"*Name*: *{response['title']['romaji']}*(`{response['title']['native']}`)\n*ID*: `{response['id']}`"
    if response["nextAiringEpisode"]:
        time = response["nextAiringEpisode"]["timeUntilAiring"] * 1000
        time = t(time)
        msg += f"\n*·¥á·¥ò…™s·¥è·¥Ö·¥á*: `{response['nextAiringEpisode']['episode']}`\n*Airing In*: `{time}`"
    else:
        msg += f"\n*·¥á·¥ò…™s·¥è·¥Ö·¥á*:{response['episodes']}\n*Status*: `N/A`"
    update.effective_message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)


def anime(update: Update, context: CallbackContext):
    message = update.effective_message
    search = extract_arg(message)
    if not search:
        update.effective_message.reply_text("“ì·¥è Ä·¥ç·¥Ä·¥õ : /anime < anime name >")
        return
    variables = {"search": search}
    json = requests.post(
        url,
        json={"query": anime_query, "variables": variables},
    ).json()
    if "errors" in json.keys():
        update.effective_message.reply_text("·¥Ä…¥…™·¥ç·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")
        return
    if json:
        json = json["data"]["Media"]
        msg = f"*{json['title']['romaji']}*(`{json['title']['native']}`)\n*Type*: {json['format']}\n*Status*: {json['status']}\n*Episodes*: {json.get('episodes', 'N/A')}\n*Duration*: {json.get('duration', 'N/A')} Per Ep.\n*Score*: {json['averageScore']}\n*Genres*: `"
        for x in json["genres"]:
            msg += f"{x}, "
        msg = msg[:-2] + "`\n"
        msg += "*Studios*: `"
        for x in json["studios"]["nodes"]:
            msg += f"{x['name']}, "
        msg = msg[:-2] + "`\n"
        info = json.get("siteUrl")
        trailer = json.get("trailer", None)
        json["id"]
        if trailer:
            trailer_id = trailer.get("id", None)
            site = trailer.get("site", None)
            if site == "youtube":
                trailer = f"https://youtu.be/{trailer_id}"
        description = (
            json.get("description", "N/A")
            .replace("<i>", "")
            .replace("</i>", "")
            .replace("<br>", "")
            .replace("~!", "")
            .replace("!~", "")
        )
        msg += shorten(description, info)
        image = json.get("bannerImage", None)
        if trailer:
            buttons = [
                [
                    InlineKeyboardButton("·¥ç·¥è Ä·¥á …™…¥“ì·¥è", url=info),
                    InlineKeyboardButton("·¥õ Ä·¥Ä…™ ü·¥á Ä üé¨", url=trailer),
                ],
            ]
        else:
            buttons = [[InlineKeyboardButton("·¥ç·¥è Ä·¥á …™…¥“ì·¥è", url=info)]]
        if image:
            try:
                update.effective_message.reply_photo(
                    photo=image,
                    caption=msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons),
                )
            except:
                msg += f" [„ÄΩÔ∏è]({image})"
                update.effective_message.reply_text(
                    msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons),
                )
        else:
            update.effective_message.reply_text(
                msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(buttons),
            )


def character(update: Update, context: CallbackContext):
    message = update.effective_message
    search = extract_arg(message)
    if not search:
        update.effective_message.reply_text("“ì·¥è Ä·¥ç·¥Ä·¥õ : /character < character name >")
        return
    variables = {"query": search}
    json = requests.post(
        url,
        json={"query": character_query, "variables": variables},
    ).json()
    if "errors" in json.keys():
        update.effective_message.reply_text("·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö")
        return
    if json:
        json = json["data"]["Character"]
        msg = f"*{json.get('name').get('full')}* (`{json.get('name').get('native')}`)\n"
        description = f"{json['description']}".replace("~!", "").replace("!~", "")
        site_url = json.get("siteUrl")
        msg += shorten(description, site_url)
        if image := json.get("image", None):
            image = image.get("large")
            update.effective_message.reply_photo(
                photo=image,
                caption=msg.replace("<b>", "</b>"),
                parse_mode=ParseMode.MARKDOWN,
            )
        else:
            update.effective_message.reply_text(
                msg.replace("<b>", "</b>"),
                parse_mode=ParseMode.MARKDOWN,
            )


def manga(update: Update, context: CallbackContext):
    message = update.effective_message
    search = extract_arg(message)
    if not search:
        update.effective_message.reply_text("“ì·¥è Ä·¥ç·¥Ä·¥õ : /manga < manga name >")
        return
    variables = {"search": search}
    json = requests.post(
        url,
        json={"query": manga_query, "variables": variables},
    ).json()
    msg = ""
    if "errors" in json.keys():
        update.effective_message.reply_text("Manga not found")
        return
    if json:
        json = json["data"]["Media"]
        title, title_native = json["title"].get("romaji", False), json["title"].get(
            "native",
            False,
        )
        start_date, status, score = (
            json["startDate"].get("year", False),
            json.get("status", False),
            json.get("averageScore", False),
        )
        if title:
            msg += f"*{title}*"
            if title_native:
                msg += f"(`{title_native}`)"
        if start_date:
            msg += f"\n*s·¥õ·¥Ä Ä·¥õ ·¥Ö·¥Ä·¥õ·¥á* - `{start_date}`"
        if status:
            msg += f"\n*s·¥õ·¥Ä·¥õ·¥ús* - `{status}`"
        if score:
            msg += f"\n*s·¥Ñ·¥è Ä·¥á* - `{score}`"
        msg += "\n*…¢·¥á…¥ Ä·¥ás* - "
        for x in json.get("genres", []):
            msg += f"{x}, "
        msg = msg[:-2]
        info = json["siteUrl"]
        buttons = [[InlineKeyboardButton("·¥ç·¥è Ä·¥á …™…¥“ì·¥è", url=info)]]
        image = json.get("bannerImage", False)
        msg += f"\n_{json.get('description', None)}_"
        if image:
            try:
                update.effective_message.reply_photo(
                    photo=image,
                    caption=msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons),
                )
            except:
                msg += f" [„ÄΩÔ∏è]({image})"
                update.effective_message.reply_text(
                    msg,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(buttons),
                )
        else:
            update.effective_message.reply_text(
                msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(buttons),
            )


def upcoming(update: Update, context: CallbackContext):
    jikan = jikanpy.jikan.Jikan()
    upcomin = jikan.top("anime", page=1, subtype="upcoming")

    upcoming_list = [entry["title"] for entry in upcomin["top"]]
    upcoming_message = ""

    for entry_num in range(len(upcoming_list)):
        if entry_num == 10:
            break
        upcoming_message += f"{entry_num + 1}. {upcoming_list[entry_num]}\n"

    update.effective_message.reply_text(upcoming_message)


def site_search(update: Update, context: CallbackContext, site: str):
    message = update.effective_message
    search_query = extract_arg(message)
    more_results = True

    if not search_query:
        message.reply_text("…¢…™·¥†·¥á s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥õ·¥è s·¥á·¥Ä Ä·¥Ñ ú")
        return

    if site == "kaizoku":
        search_url = f"https://animekaizoku.com/?s={search_query}"
        html_text = requests.get(search_url).text
        soup = bs4.BeautifulSoup(html_text, "html.parser")
        if search_result := soup.find_all("h2", {"class": "post-title"}):
            result = f"<b>s·¥á·¥Ä Ä·¥Ñ ú  Ä·¥ás·¥ú ü·¥õs “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>on</b> @KaizokuAnime: \n\n"
            for entry in search_result:
                post_link = "https://animekaizoku.com/" + entry.a["href"]
                post_name = html.escape(entry.text)
                result += f"‚Ä¢ <a href='{post_link}'>{post_name}</a>\n"
        else:
            more_results = False
            result = f"<b>…¥·¥è  Ä·¥ás·¥ú ü·¥õ “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä</b> <code>{html.escape(search_query)}</code> <b>on</b> @KaizokuAnime"

            post_link = entry.a["href"]
            post_name = html.escape(entry.text.strip())
            result += f"‚Ä¢ <a href='{post_link}'>{post_name}</a>\n"

    buttons = [[InlineKeyboardButton("s·¥á·¥á ·¥Ä ü ü  Ä·¥ás·¥ú ü·¥õs", url=search_url)]]

    if more_results:
        message.reply_text(
            result,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(buttons),
            disable_web_page_preview=True,
        )
    else:
        message.reply_text(
            result,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )


def kaizoku(update: Update, context: CallbackContext):
    site_search(update, context, "kaizoku")


__help__ = """
…¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥…™·¥ç·¥á, ·¥ç·¥Ä…¥…¢·¥Ä ·¥è Ä ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs “ì Ä·¥è·¥ç [·¥Ä…¥…™ ü…™s·¥õ](anilist.co) ·¥Ä…¥·¥Ö [·¥ç·¥Ä ü](https://myanimelist.net/)

*·¥Ä…¥…™ ü…™s·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:*

‚Ä¢ /anime <anime>*:* ` Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ä…¥…™·¥ç·¥á “ì Ä·¥è·¥ç ·¥Ä…¥…™ ü…™s·¥õ `
 
‚Ä¢ /character <character>*:* ` Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì Ä·¥è·¥ç ·¥Ä…¥…™ ü…™s·¥õ `
  
‚Ä¢ /manga <manga>*:* ` Ä·¥á·¥õ·¥ú Ä…¥s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥ç·¥Ä…¥…¢·¥Ä “ì Ä·¥è·¥ç ·¥Ä…¥…™ ü…™s·¥õ `
  
‚Ä¢ /upcoming*:* ` Ä·¥á·¥õ·¥ú Ä…¥s ·¥Ä  ü…™s·¥õ ·¥è“ì …¥·¥á·¥° ·¥Ä…¥…™·¥ç·¥á …™…¥ ·¥õ ú·¥á upcoming s·¥á·¥Äs·¥è…¥s “ì Ä·¥è·¥ç ·¥Ä…¥…™ ü…™s·¥õ `
  
‚Ä¢ /airing <anime>*:* ` Ä·¥á·¥õ·¥ú Ä…¥s ·¥Ä…¥…™·¥ç·¥á ·¥Ä…™ Ä…™…¥…¢ …™…¥“ì·¥è “ì Ä·¥è·¥ç ·¥Ä…¥…™ ü…™s·¥õ `
 
*·¥Ä…¥…™·¥ç·¥á s·¥á·¥Ä Ä·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:*

‚Ä¢ /kaizoku*:* `s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¥ ·¥Ä…¥…™·¥ç·¥á ·¥è…¥ ·¥Ä…¥…™·¥ç·¥á·¥ã·¥Ä…™·¥¢·¥è·¥ã·¥ú ·¥°·¥á ôs…™·¥õ·¥á`
   
*·¥Ä…¥…™·¥ç·¥á ·¥ú·¥õ…™ üs:*

‚Ä¢ /fillers <·¥Ä…¥…™·¥ç·¥á …¥·¥Ä·¥ç·¥á>*:* `…¢·¥á·¥õs  è·¥è·¥ú ·¥õ ú·¥á “ì…™ ü ü·¥á Ä ·¥á·¥ò…™s·¥è·¥Ö·¥ás  ü…™s·¥õ “ì·¥è Ä ·¥õ ú·¥á …™…¥·¥ò·¥ú·¥õ ·¥Ä…¥…™·¥ç·¥á `
‚Ä¢ /fillers -n<…¥·¥ú·¥ç ô·¥á Ä> <·¥Ä…¥…™·¥ç·¥á …¥·¥Ä·¥ç·¥á>*:* `“ì…™ ü ü·¥á Ä ·¥á·¥ò…™s·¥è·¥Ö·¥ás  ü…™s·¥õ ·¥Ñ ú·¥ès·¥á…¥ “ì Ä·¥è·¥ç ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä…¥…™·¥ç·¥á`

*·¥áx·¥Ä·¥ç·¥ò ü·¥á:* /fillers naruto - ·¥°…™ ü ü …¢·¥á·¥õ  è·¥è·¥ú ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì …¥·¥Ä Ä·¥ú·¥õ·¥è ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥õ·¥Ñ ú…™…¥…¢ s·¥á Ä…™·¥ás
         /fillers -n1 naruto - ·¥°…™ ü ü ·¥Ñ ú·¥ès·¥á ·¥õ·¥è s ú·¥è·¥° ·¥õ ú·¥á “ì…™ ü ü·¥á Ä ·¥á·¥ò…™s·¥è·¥Ö·¥ás “ì·¥è Ä ·¥õ ú·¥á 1s·¥õ ·¥Ä…¥…™·¥ç·¥á ·¥õ·¥è·¥è·¥ã “ì Ä·¥è·¥ç ·¥õ ú·¥á  ü…™s·¥õ·¥á·¥Ö s·¥á Ä…™·¥ás

*NOTE*: “ì…™ ü ü·¥á Ä ·¥á·¥ò…™s·¥è·¥Ö·¥ás ·¥Ä Ä·¥á ·¥õ ú·¥ès·¥á ·¥á·¥ò…™s·¥è·¥Ö·¥ás ·¥° ú…™·¥Ñ ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥ç·¥Ä…™…¥ s·¥õ·¥è Ä è  ü…™…¥·¥á

‚Ä¢ /schedule <·¥°·¥á·¥á·¥ã·¥Ö·¥Ä è>*:* `…¢·¥á·¥õs  è·¥è·¥ú ·¥õ ú·¥á ·¥Ä…¥…™·¥ç·¥á ·¥á·¥ò…™s·¥è·¥Ö·¥ás s·¥Ñ ú·¥á·¥Ö·¥ú ü·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…™ Ä·¥á·¥Ö ·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ö·¥Ä è`

*·¥áx·¥Ä·¥ç·¥ò ü·¥á:*  /schedule monday ·¥è Ä /schedule 0


‚Ä¢ /animequotes *:* `…¢·¥á·¥õ «´·¥ú·¥è·¥õ·¥ás …™…¥ ·¥ò…™·¥Ñ·¥õ·¥ú Ä·¥á`

‚Ä¢ /quote*:* `…¢·¥á·¥õ ·¥õ·¥áx·¥õ «´·¥ú·¥è·¥õ·¥ás`
     
"""


ANIME_HANDLER = DisableAbleCommandHandler("anime", anime, run_async=True)
AIRING_HANDLER = DisableAbleCommandHandler("airing", airing, run_async=True)
CHARACTER_HANDLER = DisableAbleCommandHandler("character", character, run_async=True)
MANGA_HANDLER = DisableAbleCommandHandler("manga", manga, run_async=True)
##USER_HANDLER = DisableAbleCommandHandler("user", user, run_async=True)
UPCOMING_HANDLER = DisableAbleCommandHandler("upcoming", upcoming, run_async=True)
KAIZOKU_SEARCH_HANDLER = DisableAbleCommandHandler("kaizoku", kaizoku, run_async=True)
##KAYO_SEARCH_HANDLER = DisableAbleCommandHandler("kayo", kayo, run_async=True)

dispatcher.add_handler(ANIME_HANDLER)
dispatcher.add_handler(CHARACTER_HANDLER)
dispatcher.add_handler(MANGA_HANDLER)
dispatcher.add_handler(AIRING_HANDLER)
# dispatcher.add_handler(USER_HANDLER)
dispatcher.add_handler(KAIZOKU_SEARCH_HANDLER)
# dispatcher.add_handler(KAYO_SEARCH_HANDLER)
dispatcher.add_handler(UPCOMING_HANDLER)

__mod_name__ = "ùô∞…¥…™·¥ç·¥á ‚ù§Ô∏è"
__command_list__ = [
    "anime",
    "manga",
    "character",
    "user",
    "upcoming",
    "airing",
    "kayo",
    "kaizoku",
]
__handlers__ = [
    ANIME_HANDLER,
    CHARACTER_HANDLER,
    MANGA_HANDLER,
    #   USER_HANDLER,
    UPCOMING_HANDLER,
    # KAYO_SEARCH_HANDLER,
    AIRING_HANDLER,
    KAIZOKU_SEARCH_HANDLER,
]
