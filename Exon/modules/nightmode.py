from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telethon import functions, types
from telethon.tl.types import ChatBannedRights

from Exon import dispatcher
from Exon import telethn as tbot
from Exon.events import register
from Exon.modules.sql.nightmode_sql import (
    add_nightmode,
    get_all_chat_id,
    is_nightmode_indb,
    rmnightmode,
)


async def is_register_admin(chat, user):
    if isinstance(chat, (types.InputPeerChannel, types.InputChannel)):

        return isinstance(
            (
                await tbot(functions.channels.GetParticipantRequest(chat, user))
            ).participant,
            (types.ChannelParticipantAdmin, types.ChannelParticipantCreator),
        )
    elif isinstance(chat, types.InputPeerChat):

        ui = await tbot.get_peer_id(user)
        ps = (
            await tbot(functions.messages.GetFullChatRequest(chat.chat_id))
        ).full_chat.participants.participants
        return isinstance(
            next((p for p in ps if p.user_id == ui), None),
            (types.ChatParticipantAdmin, types.ChatParticipantCreator),
        )
    else:
        return None


hima = ChatBannedRights(
    until_date=None,
    send_messages=True,
    send_media=True,
    send_stickers=True,
    send_gifs=True,
    send_games=True,
    send_inline=True,
    send_polls=True,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)
openhima = ChatBannedRights(
    until_date=None,
    send_messages=False,
    send_media=False,
    send_stickers=False,
    send_gifs=False,
    send_games=False,
    send_inline=False,
    send_polls=False,
    invite_users=True,
    pin_messages=True,
    change_info=True,
)


@register(pattern="^/nightmode")
async def close_ws(event):
    if event.is_group:
        if not (await is_register_admin(event.input_chat, event.message.sender_id)):
            await event.reply(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...")
            return

    if not event.is_group:
        await event.reply(" è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥á…¥·¥Ä ô ü·¥á …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á …™…¥ …¢ Ä·¥è·¥ú·¥òs.")
        return
    if is_nightmode_indb(str(event.chat_id)):
        await event.reply("·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á.")
        return
    add_nightmode(str(event.chat_id))
    await event.reply(
        f"·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ {event.chat.title} ·¥°…™·¥õ ú …™·¥Ö `{event.chat_id}` ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. **·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥°…™ ü ü  ô·¥á ·¥Ñ ü·¥ès·¥á·¥Ö ·¥è…¥ 12 ·¥Ä·¥ç (…™s·¥õ) ·¥Ä…¥·¥Ö ·¥°…™ ü ü ·¥è·¥ò·¥á…¥ ·¥è…¥ 06 ·¥Ä·¥ç (…™s·¥õ)**"
    )


@register(pattern="^/rmnight")
async def disable_ws(event):
    if event.is_group:
        if not (await is_register_admin(event.input_chat, event.message.sender_id)):
            await event.reply(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö...")
            return

    if not event.is_group:
        await event.reply(" è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è ·¥Ö…™s·¥Ä ô ü·¥á …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á …™…¥ …¢ Ä·¥è·¥ú·¥òs.")
        return
    if not is_nightmode_indb(str(event.chat_id)):
        await event.reply("·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs …¥·¥è·¥õ ·¥á…¥·¥Ä ô ü·¥á·¥Ö …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á.")
        return
    rmnightmode(str(event.chat_id))
    await event.reply(
        f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ {event.chat.title} ·¥°…™·¥õ ú …™·¥Ö `{event.chat_id}` “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á."
    )


async def job_close():
    ws_chats = get_all_chat_id()
    if len(ws_chats) == 0:
        return
    for warner in ws_chats:
        try:
            await tbot.send_message(
                int(warner.chat_id),
                f"12:00 AM, …¢ Ä·¥è·¥ú·¥ò …™s Closing ·¥õ…™ ü ü 6 ·¥Ä·¥ç. …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ! \n**·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è {dispatcher.bot.username} **",
            )
            await tbot(
                functions.messages.EditChatDefaultBannedRightsRequest(
                    peer=int(warner.chat_id), banned_rights=hima
                )
            )
        except Exception as e:
            logger.info(f"·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ñ ü·¥ès·¥á …¢ Ä·¥è·¥ú·¥ò {warner} - {e}")


# Run everyday at 12am
scheduler = AsyncIOScheduler(timezone="Asia/Kolkata")
scheduler.add_job(job_close, trigger="cron", hour=23, minute=59)
scheduler.start()


async def job_open():
    ws_chats = get_all_chat_id()
    if len(ws_chats) == 0:
        return
    for warner in ws_chats:
        try:
            await tbot.send_message(
                int(warner.chat_id),
                f"06:00 ·¥Ä·¥ç, …¢ Ä·¥è·¥ú·¥ò …™s ·¥è·¥ò·¥á…¥…™…¥…¢.\n**·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è {dispatcher.bot.username}**",
            )
            await tbot(
                functions.messages.EditChatDefaultBannedRightsRequest(
                    peer=int(warner.chat_id), banned_rights=openhima
                )
            )
        except Exception as e:
            logger.info(f"·¥ú…¥·¥Ä ô ü·¥á ·¥õ·¥è ·¥è·¥ò·¥á…¥ …¢ Ä·¥è·¥ú·¥ò {warner.chat_id} - {e}")


# Run everyday at 06
scheduler = AsyncIOScheduler(timezone="Asia/Kolkata")
scheduler.add_job(job_open, trigger="cron", hour=5, minute=59)
scheduler.start()

__help__ = """
*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è*

‚çü /nightmode*:* `·¥Ä·¥Ö·¥Ös …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è …¥…™…¢ ú·¥õ·¥ç·¥è·¥Ö·¥á ·¥Ñ ú·¥Ä·¥õs `

‚çü /rmnight*:* ` Ä·¥á·¥ç·¥è·¥†·¥ás …¢ Ä·¥è·¥ú·¥ò “ì Ä·¥è·¥ç …¥…™…¢ ú·¥õ·¥ç·¥è·¥Ö·¥á ·¥Ñ ú·¥Ä·¥õs `

*…¥·¥è·¥õ·¥á:* …¥…™…¢ ú·¥õ ·¥ç·¥è·¥Ö·¥á ·¥Ñ ú·¥Ä·¥õs …¢·¥á·¥õ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ñ ü·¥ès·¥á·¥Ö ·¥Ä·¥õ 12 ·¥Ä·¥ç (…™s·¥õ) ·¥Ä…¥·¥Ö ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥è·¥ò·¥á…¥s ·¥Ä·¥õ 6 ·¥Ä·¥ç (…™s·¥õ) ·¥õ·¥è ·¥ò Ä·¥á·¥†·¥á…¥·¥õ …¥…™…¢ ú·¥õ s·¥ò·¥Ä·¥çs.
"""

__mod_name__ = "ùôΩ-·¥ç·¥è·¥Ö·¥á üåÉ"
