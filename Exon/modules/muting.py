"""
MIT License

Copyright (c) 2022 A ô…™s ú…¥·¥è…™

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import html
import re
from typing import Optional

from telegram import (
    Bot,
    CallbackQuery,
    Chat,
    ChatPermissions,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
    Update,
    User,
)
from telegram.error import BadRequest
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler
from telegram.utils.helpers import mention_html

from Exon import LOGGER, TIGERS, dispatcher
from Exon.modules.helper_funcs.chat_status import (
    bot_admin,
    can_restrict,
    connection_status,
    is_user_admin,
    user_admin,
    user_admin_no_reply,
)
from Exon.modules.helper_funcs.extraction import extract_user_and_text
from Exon.modules.helper_funcs.string_handling import extract_time
from Exon.modules.log_channel import loggable
from Exon.modules.sql.approve_sql import is_approved


def check_user(user_id: int, bot: Bot, chat: Chat) -> Optional[str]:

    if not user_id:
        reply = "ùöàùöòùöû ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ.."
        return reply

    if is_approved(chat.id, user_id):
        reply = (
            "·¥õ ú…™s …™s ·¥ús·¥á Ä is ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥ç·¥ú·¥õ·¥á·¥Ö!"
        )
        return reply

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message == "User not found":
            reply = "I can't seem to find this user"
            return reply
        raise

    if user_id == bot.id:
        reply = "I'm …¥·¥è·¥õ …¢·¥è…¥…¥·¥Ä ·¥ç·¥ú·¥õ·¥á ·¥ç ès·¥á ü“ì, …¥·¥è·¥è ô?"
        return reply

    if is_user_admin(chat, user_id, member) or user_id in TIGERS:
        reply = "·¥Ñ·¥Ä…¥'·¥õ. “ì…™…¥·¥Ö s·¥è·¥ç·¥á·¥è…¥·¥á ·¥á üs·¥á ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á  ô·¥ú·¥õ …¥·¥è·¥õ ·¥õ ú…™s ·¥è…¥·¥á."
        return reply

    return None


@connection_status
@bot_admin
@user_admin
@loggable
def mute(update: Update, context: CallbackContext) -> str:
    bot, args = context.bot, context.args
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id, reason = extract_user_and_text(message, args)
    if reply := check_user(user_id, bot, chat):
        message.reply_text(reply)
        return ""

    member = chat.get_member(user_id)

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥ç·¥ú·¥õ·¥á\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
    )

    if reason:
        log += f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> {reason}"

    if member.can_send_messages is None or member.can_send_messages:
        chat_permissions = ChatPermissions(can_send_messages=False)
        bot.restrict_chat_member(chat.id, user_id, chat_permissions)
        msg = (
            f"<code>üó£Ô∏è</code><b>·¥ç·¥ú·¥õ·¥á Event</b>\n"
            f"<code> </code><b>‚Ä¢ ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
        )
        if reason:
            msg += f"\n<code> </code><b>‚Ä¢  Ä·¥á·¥Äs·¥è…¥:</b> \n{html.escape(reason)}"

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "·¥ú…¥·¥ç·¥ú·¥õ·¥á", callback_data=f"unmute_({member.user.id})"
                    )
                ]
            ]
        )

        bot.sendMessage(
            chat.id,
            msg,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
        return log
    message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö!")

    return ""


@connection_status
@bot_admin
@user_admin
@loggable
def unmute(update: Update, context: CallbackContext) -> str:
    bot, args = context.bot, context.args
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text(
            " è·¥è·¥ú' ü ü …¥·¥á·¥á·¥Ö to ·¥á…™·¥õ ú·¥á Ä …¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á, ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è s·¥è·¥ç·¥á·¥è…¥·¥á ·¥õ·¥è  ô·¥á ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö."
        )
        return ""

    member = chat.get_member(int(user_id))

    if member.status in ("kicked", "left"):
        message.reply_text(
            "·¥õ ú…™s ·¥ús·¥á Ä …™s…¥'·¥õ ·¥á·¥†·¥á…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ, ·¥ú…¥·¥ç·¥ú·¥õ…™…¥…¢ ·¥õ ú·¥á·¥ç ·¥°·¥è…¥'·¥õ ·¥ç·¥Ä·¥ã·¥á ·¥õ ú·¥á·¥ç ·¥õ·¥Ä ü·¥ã ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ ·¥õ ú·¥á è "
            "·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è!",
        )

    elif (
        member.can_send_messages
        and member.can_send_media_messages
        and member.can_send_other_messages
        and member.can_add_web_page_previews
    ):
        message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Äs ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è s·¥ò·¥á·¥Ä·¥ã.")
    else:
        chat_permissions = ChatPermissions(
            can_send_messages=True,
            can_invite_users=True,
            can_pin_messages=True,
            can_send_polls=True,
            can_change_info=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
        )
        try:
            bot.restrict_chat_member(chat.id, int(user_id), chat_permissions)
        except BadRequest:
            pass
        bot.sendMessage(
            chat.id,
            f"{mention_html(member.user.id, member.user.first_name)} ·¥°·¥Äs ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö  ô è {mention_html(user.id, user.first_name)} in <b>{message.chat.title}</b>\n<b> Ä·¥á·¥Äs·¥è…¥</b>: <code>{reason}</code>",
            parse_mode=ParseMode.HTML,
        )

        return (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#·¥ú…¥·¥ç·¥ú·¥õ·¥á\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
            f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
        )
    return ""


@connection_status
@bot_admin
@can_restrict
@user_admin
@loggable
def temp_mute(update: Update, context: CallbackContext) -> str:
    bot, args = context.bot, context.args
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    user_id, reason = extract_user_and_text(message, args)
    if reply := check_user(user_id, bot, chat):
        message.reply_text(reply)
        return ""

    member = chat.get_member(user_id)

    if not reason:
        message.reply_text(" è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥Ä ·¥õ…™·¥ç·¥á ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á ·¥õ ú…™s ·¥ús·¥á Ä “ì·¥è Ä!")
        return ""

    split_reason = reason.split(None, 1)

    time_val = split_reason[0].lower()
    reason = split_reason[1] if len(split_reason) > 1 else ""
    mutetime = extract_time(message, time_val)

    if not mutetime:
        return ""

    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥õ·¥á·¥ç·¥ò ·¥ç·¥ú·¥õ·¥á·¥Ö\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}\n"
        f"<b>·¥õ…™·¥ç·¥á:</b> {time_val}"
    )
    if reason:
        log += f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> {reason}"

    try:
        if member.can_send_messages is None or member.can_send_messages:
            chat_permissions = ChatPermissions(can_send_messages=False)
            bot.restrict_chat_member(
                chat.id,
                user_id,
                chat_permissions,
                until_date=mutetime,
            )
            msg = (
                f"<code>üó£Ô∏è</code><b>·¥õ…™·¥ç·¥á ·¥ç·¥ú·¥õ·¥á ·¥á·¥†·¥á…¥·¥õ</b>\n"
                f"<code> </code><b>‚Ä¢ ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}\n"
                f"<code> </code><b>‚Ä¢ ·¥ús·¥á Ä ·¥°…™ ü ü  ô·¥á ·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä:</b> {time_val}\n"
            )

            keyboard = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "·¥ú…¥·¥ç·¥ú·¥õ·¥á",
                            callback_data=f"unmute_({member.user.id})",
                        )
                    ]
                ]
            )

            bot.sendMessage(
                chat.id, msg, reply_markup=keyboard, parse_mode=ParseMode.HTML
            )

            return log
        message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö.")

    except BadRequest as excp:
        if excp.message == " Ä·¥á·¥ò ü è ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö":
            # Do not reply
            message.reply_text(f"·¥ç·¥ú·¥õ·¥á·¥Ö “ì·¥è Ä {time_val}!", quote=False)
            return log
        LOGGER.warning(update)
        LOGGER.exception(
            "·¥á Ä Ä·¥è Ä ·¥ç·¥ú·¥õ…™…¥…¢ ·¥ús·¥á Ä %s …™…¥ ·¥Ñ ú·¥Ä·¥õ %s (%s) ·¥Ö·¥ú·¥á ·¥õ·¥è %s",
            user_id,
            chat.title,
            chat.id,
            excp.message,
        )
        message.reply_text("·¥°·¥á ü ü ·¥Ö·¥Ä·¥ç…¥, …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä.")

    return ""


@user_admin_no_reply
@bot_admin
@loggable
def button(update: Update, context: CallbackContext) -> str:
    query: Optional[CallbackQuery] = update.callback_query
    user: Optional[User] = update.effective_user
    bot: Optional[Bot] = context.bot
    if match := re.match(r"unmute_\((.+?)\)", query.data):
        user_id = match[1]
        chat: Optional[Chat] = update.effective_chat
        member = chat.get_member(user_id)
        chat_permissions = ChatPermissions(
            can_send_messages=True,
            can_invite_users=True,
            can_pin_messages=True,
            can_send_polls=True,
            can_change_info=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
        )
        if unmuted := bot.restrict_chat_member(chat.id, int(user_id), chat_permissions):
            update.effective_message.edit_text(
                f"·¥Ä·¥Ö·¥ç…™…¥ {mention_html(user.id, user.first_name)} ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö {mention_html(member.user.id, member.user.first_name)}!",
                parse_mode=ParseMode.HTML,
            )
            query.answer("·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö!")
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#·¥ú…¥·¥ç·¥ú·¥õ·¥á\n"
                f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
            )
    else:
        update.effective_message.edit_text(
            "·¥õ ú…™s ·¥ús·¥á Ä …™s …¥·¥è·¥õ ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥è Ä  ú·¥Äs  ü·¥á“ì·¥õ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò!"
        )
        return ""


MUTE_HANDLER = CommandHandler("mute", mute, run_async=True)
UNMUTE_HANDLER = CommandHandler("unmute", unmute, run_async=True)
TEMPMUTE_HANDLER = CommandHandler(["tmute", "tempmute"], temp_mute, run_async=True)
UNMUTE_BUTTON_HANDLER = CallbackQueryHandler(button, pattern=r"unmute_")

dispatcher.add_handler(MUTE_HANDLER)
dispatcher.add_handler(UNMUTE_HANDLER)
dispatcher.add_handler(TEMPMUTE_HANDLER)
dispatcher.add_handler(UNMUTE_BUTTON_HANDLER)

__mod_name__ = "·¥ç·¥ú·¥õ…™…¥…¢ ü§´"
__handlers__ = [MUTE_HANDLER, UNMUTE_HANDLER, TEMPMUTE_HANDLER]
