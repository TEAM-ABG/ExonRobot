"""
MIT License

Copyright (c) 2022 A ô…™s ú…¥·¥è…™

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
# ""DEAR PRO PEOPLE,  DON'T REMOVE & CHANGE THIS LINE
# TG :- @Abishnoi1M
#     MY ALL BOTS :- Abishnoi_bots
#     GITHUB :- KingAbishnoi ""


import html
import importlib
import json
import re
import time
import traceback
from sys import version_info
from typing import Optional

from pyrogram import __version__ as pver
from pyrogram import idle
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as lver
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import CallbackContext, CallbackQueryHandler, Filters, MessageHandler
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tver

import Exon.modules.sql.users_sql as sql
from Exon import (
    BOT_USERNAME,
    CERT_PATH,
    DONATION_LINK,
    LOGGER,
    OWNER_ID,
    OWNER_USERNAME,
    PORT,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    UPDATES_CHANNEL,
    URL,
    WEBHOOK,
    StartTime,
    dispatcher,
    pgram,
    telethn,
    updater,
)

# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from Exon.modules import ALL_MODULES
from Exon.modules.disable import DisableAbleCommandHandler
from Exon.modules.helper_funcs.alternate import typing_action
from Exon.modules.helper_funcs.chat_status import is_user_admin
from Exon.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "·¥ç", " ú", "·¥Ö·¥Ä ès"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += f"{time_list.pop()}, "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


HELP_MSG = "·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú …™i~"
START_MSG = "* I ·¥Ä·¥ç ·¥°·¥á ü ü ·¥Ä…¥·¥Ö ·¥Ä ü…™·¥†·¥á ;)"


PM_START_TEX = """
 ú·¥á ü ü·¥è `{}`,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú \n·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ  ô Ä·¥è . . . 
"""

PM_START_TEXT = """
* ú·¥á ü ü·¥è {} !*
‚ú™ …™ ·¥Ä·¥ç  ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ \n·¥°…™·¥õ ú ·¥ús·¥á“ì·¥ú ü ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥õ ú·¥á…¥ s·¥á·¥á ·¥ç è ·¥ò·¥è·¥°·¥á Äs  ô·¥ú·¥Ö·¥Ö è
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
 ‚ûª *·¥ú·¥ò·¥õ…™·¥ç·¥á:* `{}`
 ‚ûª *·¥ús·¥á Äs:* `{}`
 ‚ûª *chats:* `{}`
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
‚ú™  ú…™·¥õ * ú·¥á ü·¥ò* ·¥õ·¥è s·¥á·¥á ·¥ç è ·¥ò·¥è·¥°·¥á Ä  ô·¥ú·¥Ö·¥Ö è \n[‚û•]*:*\n“ì…™ ÄÍú±·¥õ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥õ ú·¥á…¥ Íú±·¥á·¥á ·¥ç è ·¥ò·¥è·¥°·¥á Ä  ô·¥Ä ô è 
"""


GROUP_START_TEXT = """
I'm ·¥Ä·¥ç  ·¥Ä ü…™·¥†·¥á   ô·¥Ä ô è !

 ú·¥Ä·¥†·¥á…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á: {} 
"""

buttons = [
    [
        InlineKeyboardButton(
            text="‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è ‚ûï ", url=f"t.me/{BOT_USERNAME}?startgroup=true"
        )
    ],
    [
        InlineKeyboardButton(text=" ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help_back"),
        InlineKeyboardButton(
            text="s·¥è·¥ú Ä·¥Ñ·¥á üåê", url="https://github.com/TEAM-ABG/ExonRobot"
        ),
    ],
    [
        InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ ü•Ç", url=f"https://t.me/{SUPPORT_CHAT}"),
        InlineKeyboardButton(
            text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás üèÉ‚Äç‚ôÇÔ∏è", url=f"https://t.me/{UPDATES_CHANNEL}"
        ),
    ],
]


HELP_STRINGS = """
*·¥ç·¥Ä…™…¥* ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:
‚çü /help: PM's  è·¥è·¥ú ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á.
‚çü /help <module name>: ·¥ò·¥ç  è·¥è·¥ú …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥Ä·¥õ ·¥ç·¥è·¥Ö·¥ú ü·¥á.
‚çü /donate: …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥è…¥  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á!
‚çü /settings:
   ‚Ü£ …™…¥ ·¥ò·¥ç: ·¥°…™ ü ü s·¥á…¥·¥Ö  è·¥è·¥ú  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä ·¥Ä ü ü s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥ás.
   ‚Ü£ …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò: ·¥°…™ ü ü  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥õ·¥è ·¥ò·¥ç, ·¥°…™·¥õ ú ·¥Ä ü ü ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ  s·¥á·¥õ·¥õ…™…¥…¢s.
"""

DONATE_STRING = """·¥ä·¥ús·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ús, ·¥°·¥á ·¥°…™ ü ü  ô·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥  ú·¥Ä·¥ò·¥ò è"""


IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module(f"Exon.modules.{module_name}")
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("·¥Ñ·¥Ä…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ·¥°·¥è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥°…™·¥õ ú ·¥õ ú·¥á s·¥Ä·¥ç·¥á …¥·¥Ä·¥ç·¥á! ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥è…¥·¥á")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


def test(update: Update, context: CallbackContext):
    # pprint(eval(str(update)))
    # update.effective_message.reply_text("Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN)
    update.effective_message.reply_text("·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ ·¥á·¥Ö…™·¥õ·¥á·¥Ö ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á")
    print(update.effective_message)


def start(update: Update, context: CallbackContext):
    args = context.args
    usr = update.effective_user
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if mod == "Admins":
                    mod = "Admins"
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help_back"
                                )
                            ]
                        ]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match[1])

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match[1], update.effective_user.id, False)
                else:
                    send_settings(match[1], update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.4)
            lol.edit_text("üéä")
            time.sleep(0.5)
            lol.edit_text("‚ö°")
            time.sleep(0.3)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢... ")
            time.sleep(0.4)
            lol.delete()
            update.effective_message.reply_sticker(
                "CAACAgUAAx0CUgguZAABARdrYwt_f9vFYZop5n-EGGa80vLar9AAAjsIAAKagolX-O0V64tvzK8pBA"
            )
            update.effective_message.reply_text(
                PM_START_TEXT.format(
                    escape_markdown(first_name),
                    escape_markdown(uptime),
                    sql.num_users(),
                    sql.num_chats(),
                ),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption=" ú·¥á è `{}`,\n\n…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è !\n‚û•·¥ú·¥ò·¥õ…™·¥ç·¥á: `{}` \n‚û•·¥ús·¥á Äs: `{}` \n‚û•·¥Ñ ú·¥Ä·¥õs: `{}` ".format(
                usr.first_name,
                uptime,
                sql.num_users(),
                sql.num_chats(),
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ",
                            url=f"https://t.me/{SUPPORT_CHAT}",
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±",
                            url=f"https://t.me/{UPDATES_CHANNEL}",
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥°…¥·¥á Ä",
                            url=f"https://t.me/{OWNER_USERNAME}",
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ ü·¥ès·¥á",
                            callback_data="close_",
                        ),
                    ],
                ]
            ),
        )


# BSDK KY DEK RA H ¬©


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥° ú…™ ü·¥á  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥Ä…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = f"An ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥°·¥Äs  Ä·¥Ä…™s·¥á·¥Ö ·¥° ú…™ ü·¥á  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥Ä…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á\n<pre>·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á = {html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False))}</pre>\n\n<pre>{html.escape(tb)}</pre>"

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update, context):
    """#TODO
    Params:
        update  -
        context -
    """

    try:
        raise context.error
    except (Unauthorized, BadRequest):
        pass
        # remove update.message.chat_id from conversation list
    except TimedOut:
        pass
        # handle slow connection problems
    except NetworkError:
        pass
        # handle other connection problems
    except ChatMigrated:
        pass
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        pass
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match[1]
            text = (
                f"‚ïí‚ïê‚ïê‚ïê„Äå *{HELPABLE[module].__mod_name__}* module: „Äç\n"
                + HELPABLE[module].__help__
            )

            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match[1])
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match[1])
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Exon_callback_data(update, context):
    query = update.callback_query
    uptime = get_readable_time((time.time() - StartTime))
    if query.data == "Exon_":
        query.message.edit_text(
            text="""CallBackQueriesData Here""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="Exon_prev"),
                        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="Exon_back"),
                        InlineKeyboardButton(text="‚û°Ô∏è", callback_data="Exon_next"),
                    ]
                ]
            ),
        )
    elif query.data == "Exon_back":
        first_name = update.effective_user.first_name
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            PM_START_TEXT.format(
                escape_markdown(first_name),
                escape_markdown(uptime),
                sql.num_users(),
                sql.num_chats(),
            ),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )


@typing_action
def get_help(update, context):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥ò ·¥è“ì {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚Ä¢  ú·¥á ü·¥ò ‚Ä¢‚Äã",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "¬ª ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ú·¥á ü·¥©.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="‚Ä¢ ·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á ‚Ä¢",
                            url="https://t.me/{}?start=help".format(
                                context.bot.username
                            ),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚Ä¢ ·¥è·¥©·¥á…¥  ú·¥á Ä·¥á ‚Ä¢",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = f" „Äî *{HELPABLE[module].__mod_name__}* „Äï\n" + HELPABLE[module].__help__

        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                f"*{mod.__mod_name__}*:\n{mod.__user_settings__(user_id)}"
                for mod in USER_SETTINGS.values()
            )

            dispatcher.bot.send_message(
                user_id,
                "·¥õ ú·¥ás·¥á ·¥Ä Ä·¥á  è·¥è·¥ú Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢s:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "s·¥á·¥á·¥çs  ü…™·¥ã·¥á ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á…¥'·¥õ ·¥Ä…¥ è ·¥ús·¥á Ä s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ s·¥á·¥õ·¥õ…™…¥…¢s ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    elif CHAT_SETTINGS:
        chat_name = dispatcher.bot.getChat(chat_id).title
        dispatcher.bot.send_message(
            user_id,
            text=f"·¥° ú…™·¥Ñ ú ·¥ç·¥è·¥Ö·¥ú ü·¥á ·¥°·¥è·¥ú ü·¥Ö  è·¥è·¥ú  ü…™·¥ã·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã {chat_name}'s s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä?",
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
            ),
        )

    else:
        dispatcher.bot.send_message(
            user_id,
            "s·¥á·¥á·¥çs  ü…™·¥ã·¥á ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á…¥'·¥õ any chat settings available :'(\ns·¥á…¥·¥Ö ·¥õ ú…™s "
            "in ·¥Ä …¢ Ä·¥è·¥ú·¥ò chat  è·¥è·¥ú' Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ·¥è “ì…™…¥·¥Ö …™·¥õs ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢s!",
            parse_mode=ParseMode.MARKDOWN,
        )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match[1]
            module = mod_match[2]
            chat = bot.get_chat(chat_id)
            text = f"*{escape_markdown(chat.title)}*  ú·¥Äs ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä ·¥õ ú·¥á *{CHAT_SETTINGS[module].__mod_name__}* ·¥ç·¥è·¥Ö·¥ú ü·¥á:\n\n" + CHAT_SETTINGS[
                module
            ].__chat_settings__(
                chat_id, user.id
            )

            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢",
                                callback_data=f"stngs_back({chat_id})",
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match[1]
            curr_page = int(prev_match[2])
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                f" ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á «´·¥ú…™·¥õ·¥á ·¥Ä “ì·¥á·¥° s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä {chat.title} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ  è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥ás·¥õ·¥á·¥Ö in.",
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match[1]
            next_page = int(next_match[2])
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                f" ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á «´·¥ú…™·¥õ·¥á ·¥Ä “ì·¥á·¥° s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä {chat.title} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ  è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥ás·¥õ·¥á·¥Ö in.",
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match[1]
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text=f" ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á «´·¥ú…™·¥õ·¥á ·¥Ä “ì·¥á·¥° s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä {escape_markdown(chat.title)} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ  è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥ás·¥õ·¥á·¥Ö …™…¥.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "·¥ç·¥áss·¥Ä…¢·¥á …™s …¥·¥è·¥õ ·¥ç·¥è·¥Ö…™“ì…™·¥á·¥Ö",
            "Query_id_invalid",
            "·¥ç·¥áss·¥Ä…¢·¥á ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö",
        ]:
            LOGGER.exception("·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ …™…¥ s·¥á·¥õ·¥õ…™…¥…¢s  ô·¥ú·¥õ·¥õ·¥è…¥s. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type == chat.PRIVATE:
        send_settings(chat.id, user.id, True)

    elif is_user_admin(chat, user.id):
        text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  s·¥á·¥õ·¥õ…™…¥…¢s, as ·¥°·¥á ü ü ·¥Äs  è·¥è·¥ú Äs."
        msg.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥á·¥õ·¥õ…™…¥…¢s",
                            url=f"t.me/{context.bot.username}?start=stngs_{chat.id}",
                        )
                    ]
                ]
            ),
        )

    else:
        text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s."


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 1452219013 and DONATION_LINK:
            update.effective_message.reply_text(
                f" è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è the ·¥ò·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á [ ú·¥á Ä·¥á]({DONATION_LINK})",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "I've PM'ed  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ PM “ì…™ Äs·¥õ to …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ information."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("·¥ç…™…¢ Ä·¥Ä·¥õ…™…¥…¢ “ì Ä·¥è·¥ç %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ç…™…¢ Ä·¥Ä·¥õ·¥á·¥Ö!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendAnimation(
                f"@{SUPPORT_CHAT}",
                animation="https://telegra.ph/file/8dea393ddf4fc2e339179.gif",
                caption=f"""
„Ö§ü•Ä {dispatcher.bot.first_name} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è .....

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚çü **·¥ç è ·¥è·¥°…¥·¥á Ä :** [ùêÄ ô…™Íú± ú…¥·¥è…™](https://t.me/{OWNER_USERNAME})
‚çü ** ü…™ ô Ä·¥Ä Ä è ·¥†·¥á Äs…™·¥è…¥ :** `{lver}`
‚çü **·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥ :** `{tver}`
‚çü **·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥ :** `{pver}`
‚çü **·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥ :** `{version_info[0]}.{version_info[1]}.{version_info[2]}`
‚çü ** ô·¥è·¥õ ·¥†·¥á Äs…™·¥è…¥ :** `1.0`
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
""",
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                " ô·¥è·¥õ …™s…¥·¥õ ·¥Ä ô ü·¥á ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è support_chat, …¢·¥è ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã !"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    start_handler = DisableAbleCommandHandler("start", start, run_async=True)

    help_handler = DisableAbleCommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = DisableAbleCommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    data_callback_handler = CallbackQueryHandler(
        Exon_callback_data, pattern=r"Exon_", run_async=True
    )
    donate_handler = DisableAbleCommandHandler("donate", donate, run_async=True)
    migrate_handler = MessageHandler(
        Filters.status_update.migrate, migrate_chats, run_async=True
    )

    # dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(data_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    if WEBHOOK:
        LOGGER.info("·¥ús…™…¥…¢ webhooks.")
        updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN, certificate=open(CERT_PATH, "rb"))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)

    else:
        LOGGER.info(f"·¥áx·¥è…¥ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö, ·¥ús…™…¥…¢  ü·¥è…¥…¢ ·¥ò·¥è ü ü…™…¥…¢. | SUPPORT: [@{SUPPORT_CHAT}]")
        updater.start_polling(
            timeout=15,
            read_latency=4,
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
        )


if __name__ == "__main__":
    LOGGER.info(
        f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥áS Any issu JOIN @AbishnoiMF : {str(ALL_MODULES)}"
    )
    telethn.start(bot_token=TOKEN)
    pgram.start()
    main()
    idle()
